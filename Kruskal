import java.util.Arrays;

class Edge implements Comparable<Edge> {
    int src, dest, weight;

    // Fungsi komparator yang digunakan untuk mengurutkan edge berdasarkan bobotnya
    public int compareTo(Edge compareEdge) {
        return this.weight - compareEdge.weight;
    }
}

class Subset {
    int parent, rank;
}

class Graph {
    int V, E;  // V -> jumlah simpul & E -> jumlah edge
    Edge[] edge;  // Kumpulan semua edge

    // Membuat graf dengan V simpul dan E edge
    Graph(int v, int e) {
        V = v;
        E = e;
        edge = new Edge[E];
        for (int i = 0; i < e; ++i) {
            edge[i] = new Edge();
        }
    }

    // Fungsi utilitas untuk menemukan subset dari elemen i
    int find(Subset[] subsets, int i) {
        if (subsets[i].parent != i) {
            subsets[i].parent = find(subsets, subsets[i].parent);
        }
        return subsets[i].parent;
    }

    // Fungsi yang melakukan union dari dua set x dan y
    void union(Subset[] subsets, int x, int y) {
        int rootX = find(subsets, x);
        int rootY = find(subsets, y);

        // Tempelkan pohon dengan rank lebih kecil di bawah akar pohon dengan rank lebih tinggi
        if (subsets[rootX].rank < subsets[rootY].rank) {
            subsets[rootX].parent = rootY;
        } else if (subsets[rootX].rank > subsets[rootY].rank) {
            subsets[rootY].parent = rootX;
        } else {
            subsets[rootY].parent = rootX;
            subsets[rootX].rank++;
        }
    }

    // Fungsi utama untuk membangun MST menggunakan algoritma Kruskal
    void kruskalMST() {
        Edge[] result = new Edge[V];  // Array ini akan menyimpan MST yang dihasilkan
        int e = 0;  // Variabel indeks, digunakan untuk result[]
        int i = 0;  // Variabel indeks, digunakan untuk edge yang sudah diurutkan
        for (i = 0; i < V; ++i) {
            result[i] = new Edge();
        }

        // Langkah 1: Urutkan semua edge dalam urutan non-menurun berdasarkan bobotnya
        Arrays.sort(edge);

        // Alokasikan memori untuk membuat V subset
        Subset[] subsets = new Subset[V];
        for (i = 0; i < V; ++i) {
            subsets[i] = new Subset();
        }

        // Buat V subset dengan elemen tunggal
        for (int v = 0; v < V; ++v) {
            subsets[v].parent = v;
            subsets[v].rank = 0;
        }

        i = 0;  // Indeks digunakan untuk memilih edge terkecil

        // Jumlah edge yang akan diambil adalah V-1
        while (e < V - 1) {
            // Langkah 2: Pilih edge terkecil. Dan tingkatkan indeks untuk iterasi berikutnya
            Edge nextEdge = edge[i++];

            int x = find(subsets, nextEdge.src);
            int y = find(subsets, nextEdge.dest);

            // Jika menambahkan edge ini tidak menyebabkan siklus, sertakan dalam hasil
            // dan tingkatkan indeks result untuk edge berikutnya
            if (x != y) {
                result[e++] = nextEdge;
                union(subsets, x, y);
            }
            // Jika tidak, abaikan edge berikutnya
        }

        // Cetak isi dari result[] untuk menampilkan MST yang dibangun
        System.out.println("Berikut adalah edge dalam MST yang dihasilkan");
        for (i = 0; i < e; ++i) {
            System.out.println(result[i].src + " -- " + result[i].dest + " == " + result[i].weight);
        }
    }
}

public class Kruskal {
    public static void main(String[] args) {
        int V = 5;  // Jumlah simpul dalam graf (0: Data center, 1: Kantor 1, 2: Pemukiman 1, 3: Kantor 2, 4: Pemukiman 2)
        int E = 7;  // Jumlah edge dalam graf
        Graph graph = new Graph(V, E);

        // tambahkan edge 0-1 (Data center - Kantor 1)
        graph.edge[0].src = 0;
        graph.edge[0].dest = 1;
        graph.edge[0].weight = 30;

        // tambahkan edge 0-2 (Data center - Pemukiman 1)
        graph.edge[1].src = 0;
        graph.edge[1].dest = 2;
        graph.edge[1].weight = 10;

        // tambahkan edge 0-3 (Data center - Kantor 2)
        graph.edge[2].src = 0;
        graph.edge[2].dest = 3;
        graph.edge[2].weight = 20;

        // tambahkan edge 1-2 (Kantor 1 - Pemukiman 1)
        graph.edge[3].src = 1;
        graph.edge[3].dest = 2;
        graph.edge[3].weight = 5;

        // tambahkan edge 1-4 (Kantor 1 - Pemukiman 2)
        graph.edge[4].src = 1;
        graph.edge[4].dest = 4;
        graph.edge[4].weight = 25;

        // tambahkan edge 2-3 (Pemukiman 1 - Kantor 2)
        graph.edge[5].src = 2;
        graph.edge[5].dest = 3;
        graph.edge[5].weight = 13;

        // tambahkan edge 2-4 (Pemukiman 1 - Pemukiman 2)
        graph.edge[6].src = 3;
        graph.edge[6].dest = 4;
        graph.edge[6].weight = 40;

        // Jalankan algoritma Kruskal
        graph.kruskalMST();
    }
}
