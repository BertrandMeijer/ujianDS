import java.util.LinkedList;

// Kelas untuk merepresentasikan entri kendaraan
class Vehicle {
    int plateNumber;
    String vehicleDetails;

    Vehicle(int plateNumber, String vehicleDetails) {
        this.plateNumber = plateNumber;
        this.vehicleDetails = vehicleDetails;
    }

    @Override
    public String toString() {
        return "Plat Nomor: " + plateNumber + ", Detail Kendaraan: " + vehicleDetails;
    }
}

// Kelas untuk merepresentasikan Hash Table
class ParkingLot {
    private final LinkedList<Vehicle>[] hashTable;
    private final int SIZE = 10; // Ukuran dari hash table

    @SuppressWarnings("unchecked")
    ParkingLot() {
        hashTable = new LinkedList[SIZE];
        for (int i = 0; i < SIZE; i++) {
            hashTable[i] = new LinkedList<>();
        }
    }

    // Fungsi hash untuk mendapatkan indeks dari plat nomor
    private int hashFunction(int plateNumber) {
        return plateNumber % SIZE;
    }

    // Menambahkan kendaraan ke hash table
    public void parkVehicle(int plateNumber, String vehicleDetails) {
        int index = hashFunction(plateNumber);
        Vehicle vehicle = new Vehicle(plateNumber, vehicleDetails);
        hashTable[index].add(vehicle);
        System.out.println("Kendaraan diparkir pada slot: " + index);
    }

    // Mencari kendaraan berdasarkan plat nomor
    public Vehicle findVehicle(int plateNumber) {
        int index = hashFunction(plateNumber);
        for (Vehicle vehicle : hashTable[index]) {
            if (vehicle.plateNumber == plateNumber) {
                return vehicle;
            }
        }
        return null;
    }

    // Menghapus kendaraan dari hash table berdasarkan plat nomor
    public boolean removeVehicle(int plateNumber) {
        int index = hashFunction(plateNumber);
        for (Vehicle vehicle : hashTable[index]) {
            if (vehicle.plateNumber == plateNumber) {
                hashTable[index].remove(vehicle);
                System.out.println("Kendaraan dengan plat nomor " + plateNumber + " telah dihapus dari slot: " + index);
                return true;
            }
        }
        System.out.println("Kendaraan dengan plat nomor " + plateNumber + " tidak ditemukan.");
        return false;
    }

    // Menampilkan seluruh isi hash table
    public void displayParkingLot() {
        for (int i = 0; i < SIZE; i++) {
            System.out.print("Slot " + i + ": ");
            if (hashTable[i].isEmpty()) {
                System.out.println("Kosong");
            } else {
                for (Vehicle vehicle : hashTable[i]) {
                    System.out.print(vehicle + " -> ");
                }
                System.out.println("null");
            }
        }
    }
}

// Kelas utama untuk menjalankan program
public class HashingWithCollisionHandling {
    public static void main(String[] args) {
        ParkingLot parkingLot = new ParkingLot();

        // Menambahkan kendaraan ke hash table
        parkingLot.parkVehicle(1234, "Mobil Toyota Avanza");
        parkingLot.parkVehicle(5678, "Mobil Honda Jazz");
        parkingLot.parkVehicle(2345, "Mobil Suzuki Swift");
        parkingLot.parkVehicle(6789, "Mobil Nissan X-Trail");
        parkingLot.parkVehicle(1234, "Mobil Daihatsu Terios"); // Ini akan menyebabkan collision

        // Menampilkan isi parking lot
        System.out.println("\nIsi Parking Lot:");
        parkingLot.displayParkingLot();

        // Mencari kendaraan berdasarkan plat nomor
        System.out.println("\nMencari kendaraan dengan plat nomor 1234:");
        Vehicle vehicle = parkingLot.findVehicle(1234);
        System.out.println(vehicle != null ? vehicle : "Kendaraan tidak ditemukan.");

        // Menghapus kendaraan dari hash table
        System.out.println("\nMenghapus kendaraan dengan plat nomor 5678:");
        parkingLot.removeVehicle(5678);

        // Menampilkan isi parking lot setelah penghapusan
        System.out.println("\nIsi Parking Lot setelah penghapusan:");
        parkingLot.displayParkingLot();
    }
}
